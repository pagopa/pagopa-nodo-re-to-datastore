parameters:
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod

variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(DEV_CONTAINER_REGISTRY)
    CONTAINER_NAMESPACE: $(DEV_CONTAINER_NAMESPACE)
    APP_NAME: "pagopa-d-weu-nodo-re-to-datastore-fn"
    RESOURCE_GROUP: 'pagopa-d-weu-nodo-re-to-datastore-rg'

  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(UAT_CONTAINER_REGISTRY)
    CONTAINER_NAMESPACE: $(UAT_CONTAINER_NAMESPACE)
    APP_NAME: "pagopa-u-weu-nodo-re-to-datastore-fn"
    RESOURCE_GROUP: 'pagopa-u-weu-nodo-re-to-datastore-rg'

  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(PROD_CONTAINER_REGISTRY)
    CONTAINER_NAMESPACE: $(PROD_CONTAINER_NAMESPACE)
    APP_NAME: "pagopa-p-weu-nodo-re-to-datastore-fn"
    RESOURCE_GROUP: 'pagopa-p-weu-nodo-re-to-datastore-rg'

  # github action on pull request use merge as SourceBranchName but we want to use main branch
  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

stages:
  # Create a release
  - stage: release_service
    # if SEMVER is not 'skip'
    condition: ne('${{ parameters.SEMVER }}', 'skip')
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: releaseService
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"
            displayName: Set Git global config

          - template: azure-templates/maven-versioning.yml
            parameters:
              semver: "${{ parameters.SEMVER }}"

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - script: |
              echo "Checkout on $(SOURCE_BRANCH)"
              git checkout $(SOURCE_BRANCH)
            displayName: Checkout on source branch

          # bump version
          - script: |
              git add pom.xml
              git commit -m "Bump version [skip ci]"
              git push origin $(SOURCE_BRANCH)
              git push --tags

          - script: |
              HEAD_SHA=$(git rev-parse HEAD)
              TAG="$(pomversion.next)"
              TITLE="Release $(pomversion.next)"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"
            displayName: Setting vars

          - script: |
              echo $(tag)
              echo $(title)
              echo $(sha)
            displayName: Debug step

          # create new release
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: $(GITHUB_CONNECTION)
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(sha)
              tagSource: manual
              tag: $(tag)
              title: $(title)
              addChangelog: true

  # Deploy on Azure
  - stage: deploy
    condition: in(dependencies.release_service.result, 'Succeeded', 'Skipped')
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:
          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"
            displayName: Set Git global config

          - script: |
              echo "Checkout on $(SOURCE_BRANCH)"
              git checkout $(SOURCE_BRANCH)
            displayName: Checkout on source branch

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Set Maven Cache

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Bash@3
            # When the maven task is installed, mvn can be used in a script
            name: mvn_get_version
            inputs:
              targetType: "inline"
              script: |
                mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout
              failOnStderr: true

          - task: Maven@3
            displayName: Build Module
            inputs:
              mavenPomFile: "pom.xml"
              mavenOptions: "-Xmx3072m $(MAVEN_OPTS)"
              mavenVersionOption: 'Default'
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.11"
              jdkArchitectureOption: "x64"
              testResultsFiles: "**/surefire-reports/TEST-*.xml"
              publishJUnitResults: true
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              goals: "install"

          - task: Docker@2
            displayName: Build and push image to container registry
            inputs:
              command: 'buildAndPush'
              containerRegistry: '$(CONTAINER_REGISTRY)'
              repository: $(Build.Repository.Name)
              buildContext: './'
              Dockerfile: './Dockerfile'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion.next)


          # deploy
          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App [DEV|UAT]
            condition: in('${{ parameters.ENV }}', 'dev', 'uat')
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: ${{variables.APP_NAME}}
              imageName: "${{variables.CONTAINER_NAMESPACE}}:$(Build.BuildId)"
              slotName: production

          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App [PROD]
            condition: eq('${{ parameters.ENV }}', 'prod')
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: ${{variables.APP_NAME}}
              imageName: "${{variables.CONTAINER_NAMESPACE}}:$(Build.BuildId)"
              deployToSlotOrASE: true
              slotName: staging
              resourceGroupName: $(RESOURCE_GROUP)

          - script: |
              echo "##vso[task.setvariable variable=version;isOutput=true]$(pomversion.next)"
            name: dockerTag

  # Prod deploy
  - stage: deployApprovalPROD
    condition: eq('${{ parameters.ENV }}', 'prod')
    dependsOn: deploy
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: waitForApprovalPROD
        displayName: waiting for approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            displayName: Manual Approval
            inputs:
              onTimeout: "reject"

      - job: completeProdDeployFn
        displayName: complete prod function deploy
        dependsOn: waitForApprovalPROD
        steps:
          # deploy functions - swap
          - task: AzureAppServiceManage@0
            displayName: Swapping Fn Deploy
            inputs:
              ConnectedServiceName: $(AZURE_SUBSCRIPTION)
              WebAppName: ${{variables.APP_NAME}}
              ResourceGroupName: $(RESOURCE_GROUP)
              SourceSlot: staging
              SwapWithProduction: true
              Slot: production
